// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package person

import (
	"context"
)

const destroy = `-- name: Destroy :exec
DELETE FROM person
WHERE id = $1
`

func (q *Queries) Destroy(ctx context.Context, db DBTX, id int64) error {
	_, err := db.Exec(ctx, destroy, id)
	return err
}

const index = `-- name: Index :many
SELECT id, name
FROM person
ORDER BY name
`

type IndexRow struct {
	ID   int64
	Name string
}

func (q *Queries) Index(ctx context.Context, db DBTX) ([]IndexRow, error) {
	rows, err := db.Query(ctx, index)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndexRow
	for rows.Next() {
		var i IndexRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const show = `-- name: Show :one
SELECT id, name
FROM person
WHERE id = $1
LIMIT 1
`

type ShowRow struct {
	ID   int64
	Name string
}

func (q *Queries) Show(ctx context.Context, db DBTX, id int64) (ShowRow, error) {
	row := db.QueryRow(ctx, show, id)
	var i ShowRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const store = `-- name: Store :one
INSERT INTO person(name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) Store(ctx context.Context, db DBTX, name string) (Person, error) {
	row := db.QueryRow(ctx, store, name)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE person
SET name = $1
WHERE id = $2
RETURNING id, name, created_at, updated_at
`

type UpdateParams struct {
	Name string
	ID   int64
}

func (q *Queries) Update(ctx context.Context, db DBTX, arg UpdateParams) (Person, error) {
	row := db.QueryRow(ctx, update, arg.Name, arg.ID)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
